set shell := ['/bin/bash', '-cu']

repository_source := "local"
# repository_source := "remote"

# Branch to checkout when repository_source=remote
branch := "valter/dev"

container_name := "icos-devops"
snapshot_name := "icos-devops-updated"
vault_password_file := ".vault_password"
passwords_file := "dev_passwords.yml"
vm_user := "ubuntu"
local_repository_path := "../"

# List available commands as default action
default:
    just --list --unsorted --justfile {{justfile()}}

run-playbooks:
  lxc file push ./vm_scripts/run_playbooks.sh {{container_name}}/home/{{vm_user}}/
  lxc exec {{container_name}} --cwd /home/{{vm_user}} -- su ubuntu -c ./run_playbooks.sh

reset-vm: destroy-vm create-vm

create-vm: launch-vm init-vm

destroy-vm:
  lxc delete --force {{container_name}}

enter-vm:
  lxc exec {{container_name}} --cwd /home/{{vm_user}} -- su ubuntu

start-vm:
  lxc start {{container_name}}

stop-vm:
  lxc stop {{container_name}}

launch-vm:
  lxc launch ubuntu:24.04 {{container_name}}
  lxc config set {{container_name}} security.nesting=true
  lxc config device add {{container_name}} postgis-port proxy listen=tcp:127.0.0.1:5438 connect=tcp:127.0.0.1:5438
  lxc config device add {{container_name}} rdflog-port proxy listen=tcp:0.0.0.0:5433 connect=tcp:127.0.0.1:2345
  lxc file push ./vm_scripts/setup.sh {{container_name}}/root/setup_vm.sh
  lxc exec {{container_name}} -- bash setup_vm.sh
  lxc stop {{container_name}}
  lxc snapshot {{container_name}} {{snapshot_name}}
  lxc start {{container_name}}

init-vm:
    #!/usr/bin/env bash
    set -e
    echo "Stopping container"
    lxc stop {{container_name}}
    echo "Restoring snapshot"
    lxc restore {{container_name}} {{snapshot_name}}
    echo "Starting container"
    lxc start {{container_name}}
    echo "Waiting for a container startup..."
    sleep 1
    case "{{repository_source}}" in
        (local)
            lxc exec {{container_name}} -- mkdir /home/{{vm_user}}/infrastructure
            lxc file push -rp {{local_repository_path}}/* {{container_name}}/home/{{vm_user}}/infrastructure/
            lxc exec {{container_name}} -- chown -R {{vm_user}} /home/{{vm_user}}/infrastructure
            ;;

        (remote)
            lxc exec {{container_name}} -- git clone https://github.com/ICOS-Carbon-Portal/infrastructure.git /home/{{vm_user}}/infrastructure
            lxc exec {{container_name}} -- bash -c "cd /home/{{vm_user}}/infrastructure && git checkout {{branch}}"
            ;;
        *) echo "Error: repository_source must be local or remote" && exit 1
    esac

    echo "Pushing passwords file"
    lxc file push {{passwords_file}} {{container_name}}/home/{{vm_user}}/infrastructure/devops/dev.inventory/group_vars/core_host/passwords.yml
    echo "Pushing .vault_password"
    lxc file push {{vault_password_file}} {{container_name}}/home/{{vm_user}}/.vault_password

restore-rdflog:
  #!/usr/bin/env bash
  ssh fsicos2 'docker exec rdflog pg_dump -Cc --if-exists -d rdflog | gzip -c' > /tmp/rdflog_dump.gz
  lxc file push /tmp/rdflog_dump.gz icos-devops/home/ubuntu/
  lxc exec icos-devops -- bash -c "zcat /home/ubuntu/rdflog_dump.gz | docker exec -i rdflog psql -U rdflog -q"
  rm /tmp/rdflog_dump.gz

restore-restheart:
  #!/usr/bin/env bash
  mkdir -p /tmp/restheart
  cd /tmp/restheart
  borg extract fsicos2:~bbserver/repos/restheart.repo::$(borg list --short --last=1 fsicos2:~bbserver/repos/restheart.repo)
  lxc file push /tmp/restheart/backup/server.archive icos-devops/home/ubuntu/restheart_backup.archive
  lxc exec icos-devops -- bash -c "docker exec -i restheart-mongodb-1 mongorestore --archive --drop < /home/ubuntu/restheart_backup.archive"
  rm /tmp/restheart/backup/server.archive

restore-postgis:
  #!/usr/bin/env bash
  mkdir -p /tmp/postgis
  cd /tmp/postgis
  borg extract fsicos2:~bbserver/repos/postgis.repo::$(borg list --short --last=1 fsicos2:~bbserver/repos/postgis.repo)
  lxc file push /tmp/postgis/stdin icos-devops/home/ubuntu/postgis_backup.sql
  lxc exec icos-devops -- bash -c "egrep -v '^(CREATE ROLE postgres;|DROP ROLE( IF EXISTS)? postgres;)' /home/ubuntu/postgis_backup.sql | docker exec -i postgis psql -v ON_ERROR_STOP=1 -f - -U postgres"
  rm /tmp/postgis/stdin

update-postgis:
  #!/usr/bin/env bash
  lxc exec icos-devops -- bash -c "egrep -v '^(CREATE ROLE (postgres|reader|writer);|DROP ROLE( IF EXISTS)? (postgres|reader|writer);)' /home/ubuntu/postgis_backup.sql | docker exec -i postgis psql -v ON_ERROR_STOP=1 -f - -U postgres"
  lxc exec icos-devops -- docker exec postgis psql -U postgres -c "ALTER USER reader WITH PASSWORD 'reader_pass'"
  lxc exec icos-devops -- docker exec postgis psql -U postgres -c "ALTER USER writer WITH PASSWORD 'writer_pass'"
  lxc exec icos-devops -- docker exec postgis psql -U postgres -c "ALTER USER postgres WITH PASSWORD 'admin_pass'"

clean-container-backups:
  #!/usr/bin/env bash
  lxc exec icos-devops -- rm /home/ubuntu/rdflog_dump.gz
  lxc exec icos-devops -- rm /home/ubuntu/restheart_backup.archive
  lxc exec icos-devops -- rm /home/ubuntu/postgis_backup.sql
