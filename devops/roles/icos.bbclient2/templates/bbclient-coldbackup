#!/usr/bin/python3
# 1. Do (dirty) backup while service is running.
# 2. Shut down service.
# 3. Do backup again.
# 4. Start service
# 5. Prune backups.
#
# It'll output to stdout and is meant to run from a systemd timer.
#
# It's belongs to a certain bbclient installation so it contains paths
# hardcoded at templating time.

import shlex
import click

from os import access, X_OK, environ, chdir
from os.path import exists, isdir
from subprocess import Popen, run, DEVNULL

chdir("{{ bbclient_coldbackup | mandatory }}")

# The script relies on the current directory having a certain structure.
assert exists('docker-compose.yml')
assert isdir('volumes')
assert access('{{ bbclient_all }}', X_OK)

environ['BORG_UNKNOWN_UNENCRYPTED_REPO_ACCESS_IS_OK'] = 'yes'

# If this script exists we'll run it once the project is down, e.g for doing
# log rotation etc.
DOWN_HOOK = './bbclient-down-hook'


def log(arg):
    print(arg)

def bbclient(what, arg, check=True):
    print(f"{what} - {{ bbclient_all }} {arg}")
    run(['{{ bbclient_all }}'] + shlex.split(arg), check=check)

def prune():
    bbclient('prune', 'prune --verbose --stats '
             '--keep-daily=14 --keep-weekly=50 --keep-monthly=36')
    # borg(1) doesn't let us remove all archives with a given prefix, so we
    # keep the last dirty one.
    bbclient('prune dirty',
             'prune -P dirty- --verbose --stats --keep-last 1')

def compact():
    bbclient('compact', 'compact --verbose')


def start_down_hook():
    p = None
    try:
        p = Popen([DOWN_HOOK])
    except FileNotFoundError:
        log(f"No down hook {DOWN_HOOK}")
    except OSError as e:
        log(f"Could not run down hook - {DOWN_HOOK} - {e}")
    else:
        log(f"Running down hook {DOWN_HOOK} in background.")
    return p


def backup(down=False, dirty=True):
    patterns = '--patterns-from {{ bbclient_patterns_path }}'

    try:
        if dirty:
            # Dirty means that we'll take a backup while the service is still
            # running. The idea is that the cold backup will go much faster.
            # The dirty backup is run with check=False because borg signals an
            # error if any file changes during backup, which would make run()
            # throw an exception.
            bbclient('dirty backup',
                     'create -x -v --stats "::dirty-{now}" %s' % patterns,
                     check=False)
        else:
            log("Not performing dirty backup.")

        log("Bringing project down.")
        run(['docker-compose', 'down'], check=1)
        hook = start_down_hook()

        bbclient('cold backup',
                 'create -x -v --stats "::{now}" %s' % patterns)
        if hook:
            hook.wait()
            log(f"Down hook finished with returncode {hook.returncode}")
    finally:
        if down:
            log("Down flag is set - not bringing project up again")
        else:
            log("Bringing project back up")
            run(['docker-compose', 'up', '-d'])


@click.command()
# This option is useful when doing maintenance and wanting to do a last backup
# before upgrading the project, then it shouldn't be brought up again.
@click.option('--down', is_flag=True, help="Leave the application down.")
# Used when testing to skip the dirty backup.
@click.option('--dirty/--no-dirty', default=True)
def main(down, dirty):
    backup(down, dirty)
    prune()
    compact()
    log('done')


if __name__ == '__main__':
    main()
