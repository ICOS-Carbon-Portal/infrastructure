cpmeta{
	dataUploadService{
		metaServers.ICOSCities: "citymeta"
		collectionServers.ICOSCities: "citycolls"
		documentServers.ICOSCities: "citydocs"
		epicPid.dryRun = true
		handle{
			prefix.ICOSCities = ${cpmeta.dataUploadService.handle.prefix.ICOS}
			dryRun = true
		}
	}

	instanceServers{
		specific{
			citycpmeta {
				logName: "citycpmeta"
				readContexts: [
					"http://meta.icos-cp.eu/ontologies/cpmeta/",
					"https://citymeta.icos-cp.eu/resources/cpmeta/",
					"https://citymeta.icos-cp.eu/documents/"
				]
				writeContext: "https://citymeta.icos-cp.eu/resources/cpmeta/"
			}
			citymeta {
				logName: "citymeta"
				readContexts: [
					"http://meta.icos-cp.eu/ontologies/cpmeta/",
					"https://citymeta.icos-cp.eu/resources/cpmeta/",
					"https://citymeta.icos-cp.eu/resources/citymeta/",
					"https://citymeta.icos-cp.eu/documents/"
				]
				writeContext: "https://citymeta.icos-cp.eu/resources/citymeta/"
			}
			citycolls:{
				logName: "citycolls"
				readContexts: [
					"https://citymeta.icos-cp.eu/collections/",
					"https://citymeta.icos-cp.eu/resources/cpmeta/",
					"http://meta.icos-cp.eu/ontologies/cpmeta/"
				]
				writeContext: "https://citymeta.icos-cp.eu/collections/"
			}
			citydocs: {
				logName: "citydocs"
				readContexts: [
					"https://citymeta.icos-cp.eu/documents/",
					"http://meta.icos-cp.eu/ontologies/cpmeta/",
					"https://citymeta.icos-cp.eu/resources/cpmeta/"
				]
				writeContext: "https://citymeta.icos-cp.eu/documents/"
			}
		}
		forDataObjects{
			ICOSCities{
				commonReadContexts: [
					"http://meta.icos-cp.eu/ontologies/cpmeta/",
					"https://citymeta.icos-cp.eu/resources/cpmeta/",
					"https://citymeta.icos-cp.eu/resources/citymeta/"
				]
				uriPrefix: "https://citymeta.icos-cp.eu/resources/"
				definitions: [
					{ label: "cityatmprodcsv", format: "http://meta.icos-cp.eu/ontologies/cpmeta/asciiAtcProductTimeSer"},
					{ label: "cityetcprodcsv", format: "http://meta.icos-cp.eu/ontologies/cpmeta/asciiEtcHalfHourlyProductTimeSer"},
					{ label: "cityetcmulti", format: "http://meta.icos-cp.eu/ontologies/cpmeta/etcRawTimeSerMultiZip"},
					{ label: "citygenericcsv", format: "http://meta.icos-cp.eu/ontologies/cpmeta/genericCsv"},
					{ label: "citynetcdf", format: "http://meta.icos-cp.eu/ontologies/cpmeta/netcdf"},
					{ label: "citynetcdftimeser", format: "http://meta.icos-cp.eu/ontologies/cpmeta/netcdfTimeSeries"},
					{ label: "cityziparch", format: "http://meta.icos-cp.eu/ontologies/cpmeta/zipArchive"}
				]
			}
		}
		metaFlow = [{
			_type = "icos"
			cpMetaInstanceServerId = "instances"
			icosMetaInstanceServerId = "icos"
			otcMetaInstanceServerId = "otcentry"
			atcUpload{
				dirName = "atcmeta"
				uploader = "uploader@ATC"
			}
		},{
			_type = "cities"
			cpMetaInstanceServerId = "citycpmeta"
			citiesMetaInstanceServerId = "citymeta"
			munichUpload{
				dirName = "midLowCostMunich"
				uploader = "mid-low-cost-sensors@munich"
			}
			parisUpload{
				dirName = "midLowCostParis"
				uploader = "mid-low-cost-sensors@paris"
			}
			zurichUpload{
				dirName = "midLowCostZurich"
				uploader = "mid-low-cost-sensors@zurich"
			}
			atcUpload{
				dirName = "atcmeta"
				uploader = "uploader@ATC"
			}
		}]
	}

	citations.eagerWarmUp = false
	statsClient.previews.dbNames.ICOSCities = "{{ restheart_cities_db_name }}"

	onto{
		ontologies: ${cpmeta.onto.ontologies} [{ontoId: "citymeta", owlResource: "/owl/citymetaui.owl"}]
		instOntoServers{
			cpmeta.authorizedUserIds:   []
			icosmeta.authorizedUserIds: []
			otcentry.authorizedUserIds: []
			stationentry.authorizedUserIds: []
			labeling.authorizedUserIds:  []
			sitesmeta.authorizedUserIds: []

			citycpmeta {
				serviceTitle: "Carbon Portal metadata instances for ICOS Cities"
				authorizedUserIds: []
				ontoId: "citymeta"
				instanceServerId: "citycpmeta"
			}
			citymeta {
				serviceTitle: "Production metadata instances for ICOS Cities"
				authorizedUserIds: []
				ontoId: "citymeta"
				instanceServerId: "citymeta"
			}
		}
	}
}
